from fastapi import FastAPI, HTTPException
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
import jwt
import hashlib
from pydantic import BaseModel
#import sqlite3
import sqlitecloud
from datetime import datetime, timedelta

from dotenv import load_dotenv
import openai
import os
import json
import requests
#import genInvoice
from pathlib import Path
from bs4 import BeautifulSoup as Soup

#Initialize
load_dotenv()
openai.api_key = os.getenv("OPEN_AI_KEY")
openai.organization = os.getenv("OPEN_AI_ORG")
elevenlabs_key = os.getenv("ELEVENLABS_KEY")

# JWT Define a secret key (change this to a secure random value in production)
sec_value = os.getenv("RAYZE_KEY")
SECRET_KEY = str(sec_value)
sec_value = os.getenv("CLIENT_KEY")
CLIENT_KEY = str(sec_value)
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

app = FastAPI()
# Allow requests from localhost:3000
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

###DEV
# conn = sqlite3.connect('hired.db')
# cursor = conn.cursor()
###DEV

#####PROD
conn = sqlitecloud.connect("sqlitecloud://csjlcc8lsk.sqlite.cloud:8860/Rayze?apikey=D2S27bXlWEW6af6SLMcsFouWXI2728fqPQWieZxkML8")
conn.execute(f"SET USER jcooper")
conn.commit()
conn.execute(f"USE DATABASE Rayze")
conn.commit()
cursor = conn.cursor()
#####PROD

# Connect to SQLite database
def connectDB():
    ####DEV
    # conn = sqlite3.connect('hired.db')
    # return conn.cursor(), conn
    ####DEV

    ###PROD
    conn = sqlitecloud.connect("sqlitecloud://csjlcc8lsk.sqlite.cloud:8860/Rayze?apikey=D2S27bXlWEW6af6SLMcsFouWXI2728fqPQWieZxkML8")
    conn.execute(f"SET USER jcooper")
    conn.commit()
    conn.execute(f"USE DATABASE Rayze")
    conn.commit()
    return conn.cursor(), conn

    ###PROD
    #drop table users; drop table transactions; drop table invoices; drop table client_invoices; drop table clients; drop table candidates; drop table cashflows;

#Authentication functions
# Function to hash passwords
def get_password_hash(password: str):
    #Generate a SHA-256 hash of the input password.    - password: str, the plain text password to be hashed
    password_bytes = password.encode('utf-8')
    hash_obj = hashlib.sha256()
    hash_obj.update(password_bytes)
    hashed_password = hash_obj.hexdigest()
    return hashed_password


# Function to save data to the database
def save_data(table_name, data):
    try:
        cursor, conn = connectDB()
        columns = ', '.join(data.keys())
        values = ', '.join(['?' for _ in range(len(data))])
        query = f'INSERT INTO {table_name} ({columns}) VALUES ({values}) '
        print('query is.... ', query, tuple(data.values()))
        cursor.executemany(query, tuple(data.values()))
        conn.commit()
    except sqlite3.Error as e:
        print(f"An error occurred: {e.args[0]}")
    finally:
        conn.close()

# Function to get all records from a table
def get_all_records(table_name):
    cursor, conn = connectDB()
    cursor.execute(f'SELECT * FROM {table_name}')
    return cursor.fetchall()

# Function to update data in the database
def update_data(table_name, record_id, data):
    cursor, conn = connectDB()
    update_values = ', '.join([f'{key} = ?' for key in data.keys()])
    query = f'UPDATE {table_name} SET {update_values} WHERE id = ?'
    cursor.executemany(query, tuple(data.values()) + (record_id,))
    conn.commit()

# Function to find a record by ID
def find_record_by_id(table_name, record_id):
    cursor, conn = connectDB()
    cursor.execute(f'SELECT * FROM {table_name} WHERE id = ?', (record_id,))
    return cursor.fetchone()

# Function to find a record by ID
def find_record_by_field(table_name, field_name, field_value):
    cursor, conn = connectDB()
    cursor.execute(f'SELECT * FROM {table_name} WHERE {field_name} = --- ', field_value)
    print()
    return cursor.fetchall()

# Function to find a record by name
def find_record_by_name(table_name, name):
    cursor, conn = connectDB()
    cursor.execute(f'SELECT * FROM {table_name} WHERE name = ?', (name,))
    return cursor.fetchone()


# Authentication functions
#Function to create new DB
@app.get("/create_db")
def createDB():
    # conn = sqlite3.connect('hired.db')
    # cursor = conn.cursor()
    cursor, conn = connectDB()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS candidates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            role TEXT,
            location TEXT,
            candidate_cost REAL,
            phone TEXT,
            email TEXT,
            feedback TEXT,
            cv_link TEXT,
            status TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cashflows (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            cf_date TEXT,
            pay_from_id INTEGER,
            pay_to_id INTEGER,
            cf_value REAL,
            txn_id INTEGER,
            balance REAL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            client_mgr TEXT,
            client_email TEXT,
            client_addr TEXT,
            client_phone TEXT,
            payment_freq TEXT,
            client_type TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS invoices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            inv_date TEXT,
            candidate_id INTEGER,
            period_start TEXT,
            period_end TEXT,
            txn_id INTEGER,
            hours_worked FLOAT,
            inv_value FLOAT,
            inv_status TEXT
            )
        ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS client_invoices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            inv_date TEXT,
            due_date TEXT,
            period_start TEXT,
            period_end TEXT,
            client_id INTEGER,
            client_name TEXT,
            client_contact TEXT,
            client_email TEXT,
            client_addr TEXT,
            client_phone TEXT,
            explain_str TEXT,
            inv_html TEXT,
            inv_hash TEXT,
            inv_value FLOAT,
            inv_status TEXT
            )
        ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            txn_date TEXT,
            candidate_id INTEGER,
            client_id INTEGER,
            recruiter_id INTEGER,
            referral_id INTEGER,
            client_price REAL,
            referral_price REAL,
            recruiter_price REAL,
            start_date TEXT,
            end_date TEXT,
            num_payments_received INTEGER,
            total_client_recv REAL,
            total_recruiter_paid REAL,
            total_referral_paid REAL,
            last_payment_date TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            email TEXT,
            msg_id str,
            role TEXT,
            password TEXT,
            client_id int
        )
    ''')
    conn.commit()
    return "create_db OK"



# Function to preloadDB
@app.get("/preload_db")
def preloadDB():
    candidate_data = {
        "name": "Siva Pandeti",
        "role": "Data Engineer",
        "location": "Virgina",
        "candidate_cost": 100,
        "phone": "703-937-7731",
        "email": "psivah@gmail.com",
        "feedback": "Positive",
        "cv_link": "https://drive.google.com/file/d/1jkXYMRNpgrfysYOAXDzricr0gswyy0o6/view?usp=drive_link",
        "status": "Hired"
    }
    save_data('candidates', candidate_data)
    candidate_data = {
        "name": "Balachander Kandukuri",
        "role": "ML Engineer",
        "location": "Texas",
        "candidate_cost": 110,
        "phone": "346-565-5618",
        "email": "kbalachandra1007@gmail.com",
        "feedback": "Positive",
        "cv_link": "https://docs.google.com/document/d/1PUErMHUVJVJRXK5pKqaI-RXsCcdEB74d/edit?usp=sharing&ouid=116979632690159824360&rtpof=true&sd=true",
        "status": "Hired"
    }
    save_data('candidates', candidate_data)
    candidate_data = {
        "name": "Nishant Vagasiha",
        "role": "Ruby on rails Engineer",
        "location": "India",
        "candidate_cost": 32,
        "phone": "+91  87932 93234",
        "email": "nishant@webmatrixcorp.com",
        "feedback": "Positive",
        "cv_link": "https://docs.google.com/document/d/18u87iGyZYepZEnMMvQWx2nxQ9SGjWR8s3peWF9dlDPc/edit?usp=sharing",
        "status": "Hired"
    }
    save_data('candidates', candidate_data)
    candidate_data = {
        "name": "Mayur Mulay",
        "role": "QA Engineer",
        "location": "India",
        "candidate_cost": 30,
        "phone": "+91 9404406545",
        "email": "mayurkmulay91@gmail.com",
        "feedback": "Positive",
        "cv_link": "https://docs.google.com/document/d/12JQITOn0FfmoAkkTBbh8cZXskCur_6Ekw0vvQZPZGXI/edit?usp=sharing",
        "status": "Hired"
    }
    save_data('candidates', candidate_data)
    candidate_data = {
        "name": "Iti Behati",
        "role": "QA Engineer",
        "location": "USA",
        "candidate_cost": 69,
        "phone": "+1 240 889 9419",
        "email": "bahetyiti@gmail.com",
        "feedback": "Positive",
        "cv_link": "https://docs.google.com/document/d/1jKs2Bd_eleFrvm4VmUmXPgfAhjFDtnf5qUrC2hMgkIg/edit?usp=sharing",
        "status": "Hired"
    }
    save_data('candidates', candidate_data)
    candidate_data = {
        "name": "Hani Kitabwalla",
        "role": "Data Analyst",
        "location": "USA",
        "candidate_cost": 44,
        "phone": "+1 610 390 7990",
        "email": "hkitab08@gmail.com",
        "feedback": "Positive",
        "cv_link": "https://docs.google.com/document/d/1EG16MBzwWZ64p4xo9UhhXKNAJuuqaHCLiVQq8SsUwhY/edit?usp=sharing",
        "status": "Hired"
    }
    save_data('candidates', candidate_data)

    client_data = {
        "name": "Rayze",
        "client_mgr": "JC",
        "client_email": "jc@rayze.xyz",
        "client_addr": "21 Sycamore Drive, Roslyn NY 11576",
        "client_phone": "516 800 2548",
        "payment_freq": "Monthly",
        "client_type": "Owner"
    }
    save_data('clients', client_data)

    client_data = {
        "name": "TechRakers",
        "client_mgr": "Ravi Kumar",
        "client_email": "shanker@techrakers.com",
        "client_addr": "1602 W Pinhook Rd, Suite 202-B, Lafayette, LA  70508",
        "client_phone": "703 981 6261",
        "payment_freq": "Monthly",
        "client_type": "Recruiter"
    }
    save_data('clients', client_data)
    client_data = {
        "name": "Sodexo",
        "client_mgr": "Martin Ng",
        "client_email": "martin.ng@sodexo.com",
        "client_addr": "5290 california ave, Irvine CA 92617",
        "client_phone": "714-944-3542",
        "payment_freq": "Monthly",
        "client_type": "Client"
    }
    save_data('clients', client_data)
    client_data = {
        "name": "Aventar",
        "client_mgr": "Sarosh Mistry",
        "client_email": "saroshmistry@sodexo.com",
        "client_addr": "349 Pinebrook drive, Laguna CA 92654",
        "client_phone": "949 212 9927",
        "payment_freq": "Monthly",
        "client_type": "Referral"
    }
    save_data('clients', client_data)
    client_data = {
        "name": "InKind",
        "client_mgr": "Dijoy Divakar",
        "client_email": "ap@inkind.com",
        "client_addr": "600 Congress Ave, Suite 1700, Austin, TX 78701",
        "client_phone": "870-273-8473",
        "payment_freq": "Monthly",
        "client_type": "Client"
    }
    save_data('clients', client_data)

    transaction_data = {
        "txn_date" : "2023-12-26",
        "candidate_id" : 1,
        "client_id" : 3,
        "recruiter_id" : 2,
        "referral_id" : 4,
        "client_price" : 105.0,
        "referral_price" : 2.5,
        "recruiter_price" : 100.0,
        "start_date": "2023-12-26",
        "end_date" : "2024-6-26",
        "num_payments_received" : 0,
        "total_client_recv" : 0,
        "total_recruiter_paid" : 0.0,
        "total_referral_paid" : 0.0,
        "last_payment_date" : "NULL"
    }
    save_data('transactions', transaction_data)

    transaction_data = {
        "txn_date" : "2024-03-01",
        "candidate_id" : 2,
        "client_id" : 3,
        "recruiter_id" : 2,
        "referral_id" : 4,
        "client_price" : 120.0,
        "referral_price" : 5.0,
        "recruiter_price" : 110.0,
        "start_date": "2024-03-01",
        "end_date" : "2024-08-31",
        "num_payments_received" : 0,
        "total_client_recv" : 0,
        "total_recruiter_paid" : 0.0,
        "total_referral_paid" : 0.0,
        "last_payment_date" : "NULL"
    }
    save_data('transactions', transaction_data)

    transaction_data = {
        "txn_date" : "2024-03-01",
        "candidate_id" : 3,
        "client_id" : 5,
        "recruiter_id" : 2,
        "referral_id" : 4,
        "client_price" : 37.0,
        "referral_price" : 2.5,
        "recruiter_price" : 32.0,
        "start_date": "2024-03-01",
        "end_date" : "2024-08-31",
        "num_payments_received" : 0,
        "total_client_recv" : 0,
        "total_recruiter_paid" : 0.0,
        "total_referral_paid" : 0.0,
        "last_payment_date" : "NULL"
    }
    save_data('transactions', transaction_data)
    transaction_data = {
        "txn_date" : "2024-06-01",
        "candidate_id" : 4,
        "client_id" : 5,
        "recruiter_id" : 2,
        "referral_id" : 4,
        "client_price" : 35.0,
        "referral_price" : 2.5,
        "recruiter_price" : 30.0,
        "start_date": "2024-06-01",
        "end_date" : "2024-12-01",
        "num_payments_received" : 0,
        "total_client_recv" : 0,
        "total_recruiter_paid" : 0.0,
        "total_referral_paid" : 0.0,
        "last_payment_date" : "NULL"
    }
    save_data('transactions', transaction_data)
    transaction_data = {
        "txn_date" : "2024-06-01",
        "candidate_id" : 5,
        "client_id" : 3,
        "recruiter_id" : 2,
        "referral_id" : 4,
        "client_price" : 76.0,
        "referral_price" : 2.5,
        "recruiter_price" : 30.0,
        "start_date": "2024-06-01",
        "end_date" : "2024-12-01",
        "num_payments_received" : 0,
        "total_client_recv" : 0,
        "total_recruiter_paid" : 0.0,
        "total_referral_paid" : 0.0,
        "last_payment_date" : "NULL"
    }
    save_data('transactions', transaction_data)
    transaction_data = {
        "txn_date" : "2024-07-01",
        "candidate_id" : 6,
        "client_id" : 3,
        "recruiter_id" : 2,
        "referral_id" : 4,
        "client_price" : 54.0,
        "referral_price" : 2.5,
        "recruiter_price" : 44.0,
        "start_date": "2024-07-01",
        "end_date" : "2025-01-01",
        "num_payments_received" : 0,
        "total_client_recv" : 0,
        "total_recruiter_paid" : 0.0,
        "total_referral_paid" : 0.0,
        "last_payment_date" : "NULL"
    }
    save_data('transactions', transaction_data)
    # invoice_data = {
    #     "inv_date":  "2023-12-31",
    #     "candidate_id": 1,
    #     "period_start":  "2023-12-18",
    #     "period_end": "2023-12-31",
    #     "txn_id": 1,
    #     "hours_worked": 72,
    #     "inv_value":  7560,
    #     "inv_status": "PROCESSED" #PRE >> PROCESSED >> PAID //PRE invoices are per txn. so need to be aggregated by client
    # }
    # save_data('invoices', invoice_data)

    user_data = {
        "name": "jc@rayze.xyz",
        "email": "jc@rayze.xyz",
        "msg_id": "@jc212",
        "role": "ADMIN",
        "password": get_password_hash(SECRET_KEY),
        "client_id": 0
    }
    save_data('users', user_data)
    user_data = {
        "name": "shanker@techrakers.com",
        "email": "shanker@techrakers.com",
        "msg_id": "@shankerravi",
        "role": "Recruiter",
        "password": get_password_hash(CLIENT_KEY),
        "client_id": 0
    }
    save_data('users', user_data)
    user_data = {
        "name": "ar@techrakers.com",
        "email": "ar@techrakers.com",
        "msg_id": "@arrakers",
        "role": "Recruiter",
        "password": get_password_hash(CLIENT_KEY),
        "client_id": 0
    }
    save_data('users', user_data)
    return "preload_db OK"



## TEST AUTH


##MAIN
if __name__ == "__main__":
    import uvicorn
    # Run the FastAPI server using uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8800)
